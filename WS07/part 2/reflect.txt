In this workshop, I used various STL functions such as std::ifstream for file handling, std::getline to read lines, std::accumulate to sum data values, std::for_each for iterating over elements, std::any_of to check conditions, std::copy_if to filter elements, std::sort for sorting, and std::merge to combine sorted ranges. These functions were chosen for their efficiency and ability to simplify code compared to manual loops, which are more error-prone and less readable. The use of STL algorithms allows for concise and maintainable code. When implementing sortBakery, using a vector (std::vector) versus a list (std::list) affects the choice of sorting function; std::sort works for vectors, while std::list requires its own sort method, due to different underlying data structures and performance characteristics. Overall, the STL provides significant advantages in terms of code efficiency, readability, and reducing potential errors.